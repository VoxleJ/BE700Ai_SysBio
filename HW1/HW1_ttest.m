%% BE700 HW 1

clear all
close all

%Code for import generated by MATLAB
filename = 'D:\BE700Ai\HW1_data.csv';
delimiter = ',';
startRow = 2;

formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%C%[^\n\r]';

fileID = fopen(filename,'r');

dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType',... 
'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fileID);

prognosis = dataArray{:, 31};

clearvars filename delimiter startRow formatSpec fileID dataArray ans;


filename = 'D:\BE700Ai\HW1_data.csv';
delimiter = ',';
startRow = 2;
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
fileID = fopen(filename,'r');
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType',... 
'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fileID);
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),1); % Find columns with non-numeric cells
raw(:,I) = [];
columnIndices = cumsum(~I);
HW1data = cell2mat(raw);
clearvars filename delimiter startRow formatSpec fileID; 
clearvars dataArray ans raw col numericData rawData row regexstr result; 
clearvars numbers invalidThousandsSeparator thousandsRegExp I columnIndices;
%% Sorting By Prognosis (Good = 1; Bad = 0)
prognew = []*length(prognosis);
for i = 1:length(prognosis)
    if prognosis(i) == 'GOOD'
        prognew(i) = 1;
    else
        prognew(i) = 0;  
    end
end
prognew = prognew';

HW1data_tot = [HW1data prognew];

HW1data_tot = sortrows(HW1data_tot, 31);

%% Two-Sample t-Test
htot = []*30;
ptot = []*30;
neglogp = []*30;
mean_ratio = []*30;

for ii = 1:30
    [h, p] = ttest2(HW1data_tot(1:25,ii),HW1data_tot(26:87,ii));
    mean_poor = mean(HW1data_tot(1:25, ii));
    mean_good = mean(HW1data_tot(26:87, ii));
    mean_ratio(ii) = mean_good/mean_poor;
    htot(ii) = h;
    ptot(ii) = p;
    neglogp(ii) = -1*log10(p);
end

[neglogp_sort, sortorder] = sort(neglogp);

mean_ratio_sort = mean_ratio(sortorder);

scatter(neglogp_sort', mean_ratio_sort')

title('Negative Log P values and Mean Ratio for 30 Genes')
xlabel('Negative Log P values')
ylabel('Mean ratios')


