%% BE700 HW2

close all
clear all
%% 0. Import of Data

%Code for import generated by MATLAB
filename = 'D:\BE700Ai\HW1_data.csv';
delimiter = ',';
startRow = 2;

formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%C%[^\n\r]';

fileID = fopen(filename,'r');

dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType',... 
'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fileID);

prognosis = dataArray{:, 31};

clearvars filename delimiter startRow formatSpec fileID dataArray ans;


filename = 'D:\BE700Ai\HW1_data.csv';
delimiter = ',';
startRow = 2;
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
fileID = fopen(filename,'r');
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType',... 
'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
fclose(fileID);
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]
    % Converts text in the valin cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),1); % Find columns with non-numeric cells
raw(:,I) = [];
columnIndices = cumsum(~I);
HW1data = cell2mat(raw);
clearvars filename delimiter startRow formatSpec fileID; 
clearvars dataArray ans raw col numericData rawData row regexstr result; 
clearvars numbers invalidThousandsSeparator thousandsRegExp I columnIndices;

% Sorting By Prognosis (Good = 1; Bad = 0)
prognew = []*length(prognosis);
for i = 1:length(prognosis)
    if prognosis(i) == 'GOOD'
        prognew(i) = 1;
    else
        prognew(i) = 0;  
    end
end
prognew = prognew';

HW1data_tot = [HW1data prognew];

HW1data_tot = sortrows(HW1data_tot, 31);

%% 1. Perceptron Algorithm on Previous Data

%Perceptron Steps
%1. Initialize weights to a small initial value
%2. a. Calculate output for each input from the set
%   b. Update weight using w(t) + learning rate*(realout -
%   predictedout)*input value
%3. Repeat until k iterations

valin = HW1data_tot(:,1:30);
class_out = HW1data_tot(:,31);
learning_rate = 6;

%intialize w as 0.01

w = zeros(30,1);

for k = 1:600
     PredictedOutput = zeros(87,1);
     for j = 1:87
          y = valin(j,1)*w(1,1) + valin(j,2)*w(2,1) + valin(j,3)*w(3,1)+...
               valin(j,4)*w(4,1) + valin(j,5)*w(5,1) + valin(j,6)*w(6,1)+...
               valin(j,7)*w(7,1) + valin(j,8)*w(8,1) + valin(j,9)*w(9,1)+...
               valin(j,10)*w(10,1) + valin(j,11)*w(11,1) + valin(j,12)*w(12,1)+...
               valin(j,13)*w(13,1) + valin(j,14)*w(14,1) + valin(j,15)*w(15,1)+...
               valin(j,16)*w(16,1) + valin(j,17)*w(17,1) + valin(j,18)*w(18,1)+...
               valin(j,19)*w(19,1)+ valin(j,20)*w(20,1) + valin(j,21)*w(21,1)+...
               valin(j,22)*w(22,1) + valin(j,23)*w(23,1) + valin(j,24)*w(24,1)+...
               valin(j,25)*w(25,1) + valin(j,26)*w(26,1) + valin(j,27)*w(27,1)+...
               valin(j,28)*w(28,1) + valin(j,29)*w(29,1) + valin(j,30)*w(30,1);
          
            %using a relu like activation function to scale values to 0 or
            %1
            if y < 0 
                PredictedOutput(j) = 0;
            else
                PredictedOutput(j) = 1;
            end
            
          diff = class_out(j) - PredictedOutput(j);
          
          w(1,1) = w(1,1)+learning_rate*valin(j,1)*diff;
          w(2,1) = w(2,1)+learning_rate*valin(j,2)*diff;
          w(3,1) = w(3,1)+learning_rate*valin(j,3)*diff;
          w(4,1) = w(4,1)+learning_rate*valin(j,4)*diff;
          w(5,1) = w(5,1)+learning_rate*valin(j,5)*diff;
          w(6,1) = w(6,1)+learning_rate*valin(j,6)*diff;
          w(7,1) = w(7,1)+learning_rate*valin(j,7)*diff;
          w(8,1) = w(8,1)+learning_rate*valin(j,8)*diff;
          w(9,1) = w(9,1)+learning_rate*valin(j,9)*diff;
          w(10,1) = w(10,1)+learning_rate*valin(j,10)*diff;
          w(11,1) = w(11,1)+learning_rate*valin(j,11)*diff;
          w(12,1) = w(12,1)+learning_rate*valin(j,12)*diff;
          w(13,1) = w(13,1)+learning_rate*valin(j,13)*diff;
          w(14,1) = w(14,1)+learning_rate*valin(j,14)*diff;
          w(15,1) = w(15,1)+learning_rate*valin(j,15)*diff;
          w(16,1) = w(16,1)+learning_rate*valin(j,16)*diff;
          w(17,1) = w(17,1)+learning_rate*valin(j,17)*diff;
          w(18,1) = w(18,1)+learning_rate*valin(j,18)*diff;
          w(19,1) = w(19,1)+learning_rate*valin(j,19)*diff;
          w(20,1) = w(20,1)+learning_rate*valin(j,20)*diff;
          w(21,1) = w(21,1)+learning_rate*valin(j,21)*diff;
          w(22,1) = w(22,1)+learning_rate*valin(j,22)*diff;
          w(23,1) = w(23,1)+learning_rate*valin(j,23)*diff;
          w(24,1) = w(24,1)+learning_rate*valin(j,24)*diff;
          w(25,1) = w(25,1)+learning_rate*valin(j,25)*diff;
          w(26,1) = w(26,1)+learning_rate*valin(j,26)*diff;
          w(27,1) = w(27,1)+learning_rate*valin(j,27)*diff;
          w(28,1) = w(28,1)+learning_rate*valin(j,28)*diff;
          w(29,1) = w(29,1)+learning_rate*valin(j,29)*diff;
          w(30,1) = w(30,1)+learning_rate*valin(j,30)*diff;
     end
end

bsb = PredictedOutput == class_out;
correct = sum(bsb == 1, 'all');
ACC = correct/87;
fprintf('Part 1. The Accuracy after %3.f iterations is %0.4f\n',k,ACC)

